<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
  version="4.0" metadata-complete="false">

  <description>
    스프링 Web MVC 프레임워크 예제 테스트
  </description>

  <display-name>java-spring-webmvc</display-name>

  <!-- Spring Web MVC의 프론트 컨트롤러 역할을 수행할 서블릿을 지정한다. -->
  
  <!-- DispatcherServlet 배치하기 : 방법 2-->
    
  <!--
    -> Spring IoC 설정 파일을 웹 디렉토리에 두기
    -> 주의! 일반 웹 디렉토리는 클라이언트에서 접근할 수 있기 때문에
       설정 정보가 노출될 위험이 있다.
       절대로 일반 웹 디렉토리에 두지 말 것! 
  -->
  <servlet>
    <servlet-name>app</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/config/app-context.xml</param-value>
    </init-param>
    <!-- 서블릿을 요청하지 않아도 웹 애플리케이션을 시작시킬 때 자동 생성되어 
         IoC 컨테이너를 준비하는 초기화 작업을 수행할 수 있도록
         다음 옵션을 붙인다. -->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>app</servlet-name>
    <url-pattern>/app/*</url-pattern>
  </servlet-mapping>
  
<!--   <servlet> -->
<!--     <servlet-name>hello</servlet-name> -->
<!--     <servlet-class>bitcamp.HelloServlet</servlet-class> -->
<!--   </servlet> -->
<!--   <servlet-mapping> -->
<!--     <servlet-name>hello</servlet-name> -->
<!--     <url-pattern>/hello</url-pattern> -->
<!--   </servlet-mapping> -->
    
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>default.htm</welcome-file>
  </welcome-file-list>

</web-app>















